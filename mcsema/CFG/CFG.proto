// CFG.proto
//
// Definition of protobuf containing control flow graph information for
// the mcsema lifter (mcsema-lift).
//
// Currently constructed/populated by mcsema-disass, it may also be populated
// by custom tools.
//
// The top-level object is a Module, containing functions, data, and references
// to external functions and data, a la an llvm Module.
//


message OffsetTable {
    required int64 start_addr = 1;
    repeated int64 table_offsets = 2;
    repeated int64 destinations = 3;
}

message JumpTbl {
    repeated    int64       table_entries = 1;
    required    int32       zero_offset = 2;
    optional    int64       offset_from_data = 3;
}

// A single instruction in the binary's architecture
message Instruction {

    enum RefType {
      CodeRef = 0;
      DataRef = 1;
    }

    // bytes comprising instruction opcode and operands
    required    bytes             inst_bytes = 1;
    // address of this instruction in the binary
    required    int64             inst_addr = 2;
    // control flow target of a conditional instruction resulting in True
    optional    int64             true_target = 3;
    // control flow target of a conditional instruction resulting in False
    optional    int64             false_target = 4;
    // length of instruction in bytes
    required    int32             inst_len = 5;

    optional    int64             imm_reference = 6;
    optional    int64             imm_reloc_offset = 15;
    optional    RefType           imm_ref_type = 16;

    optional    int64             mem_reference = 8;
    optional    int64             mem_reloc_offset = 9;
    optional    RefType           mem_ref_type = 18;

    optional    string            ext_call_name = 7;
    optional    JumpTbl           jump_table = 10;
    optional    string            ext_data_name = 12;
    optional    bool              local_noreturn = 14;
    optional    int64             offset_table_addr = 19;
}

message Block {
    // list of instructions in this basic block
    repeated    Instruction insts = 1;
    // address of beginning of this basic block 
    required    int64       base_address = 2;
    //the block_follows list is used to rebuild the basic block CFG, so it 
    //should contain the list of base_addresses for blocks following this 
    //block in the CFG
    repeated    int64       block_follows = 3;
}

message Function {
    // the basic blocks in this function
    repeated    Block   blocks = 1;
    // address of beginning of this function
    required    int64   entry_address = 2;
    // function symbol name, as available
    optional    string  symbol_name = 3;
}

message ExternalFunction {
    enum CallingConvention {
      CallerCleanup = 0;
      CalleeCleanup = 1;
      FastCall      = 2;
      McsemaCall    = 3;
    }

    required    string            symbol_name = 1;
    required    CallingConvention calling_convention = 2;
    required    bool              has_return = 3;
    required    bool              no_return = 4;
    required    int32             argument_count = 5;
    required    bool              is_weak = 6;
}

message ExternalData {
    required    string      symbol_name = 1;
    required    int32       data_size = 2;
    required    bool        is_weak = 3;
}


message DataSymbol {
    // address of data symbol
    required int64 base_address = 1;
    required string symbol_name = 2;
    required int32 symbol_size = 3;
}

message Data {
    // start of this data section
    required    int64           base_address = 1;
    // bytes in this data section
    required    bytes           data = 2;
    repeated    DataSymbol      symbols = 3;    
    required    bool            read_only = 4;
}

message EntrySymbolExtra {
    required    int32                               entry_argc = 1;
    // calling convention
    required    ExternalFunction.CallingConvention  entry_cconv = 2;
    required    bool                                does_return = 3;
}

message EntrySymbol {
    required    string                              entry_name = 1;
    required    int64                               entry_address = 2;
    optional    EntrySymbolExtra                    entry_extra = 3;
}

message Module {
    repeated    Function            internal_funcs = 1;
    repeated    ExternalFunction    external_funcs = 2;
    repeated    Data                internal_data = 3;
    required    string              module_name = 4;
    repeated    EntrySymbol         entries = 5;
    repeated    ExternalData        external_data = 6;
    repeated    OffsetTable         offset_tables = 7;
}
